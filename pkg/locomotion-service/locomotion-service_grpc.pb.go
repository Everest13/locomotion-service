// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: locomotion-server/locomotion-server.proto

package locomotion_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocomotionService_GetLocomotion_FullMethodName    = "/locomotion.LocomotionService/GetLocomotion"
	LocomotionService_CreateLocomotion_FullMethodName = "/locomotion.LocomotionService/CreateLocomotion"
)

// LocomotionServiceClient is the client API for LocomotionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocomotionServiceClient interface {
	GetLocomotion(ctx context.Context, in *GetLocomotionRequest, opts ...grpc.CallOption) (*Locomotion, error)
	CreateLocomotion(ctx context.Context, in *LocomotionCreate, opts ...grpc.CallOption) (*CreateLocomotionResponse, error)
}

type locomotionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocomotionServiceClient(cc grpc.ClientConnInterface) LocomotionServiceClient {
	return &locomotionServiceClient{cc}
}

func (c *locomotionServiceClient) GetLocomotion(ctx context.Context, in *GetLocomotionRequest, opts ...grpc.CallOption) (*Locomotion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Locomotion)
	err := c.cc.Invoke(ctx, LocomotionService_GetLocomotion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locomotionServiceClient) CreateLocomotion(ctx context.Context, in *LocomotionCreate, opts ...grpc.CallOption) (*CreateLocomotionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLocomotionResponse)
	err := c.cc.Invoke(ctx, LocomotionService_CreateLocomotion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocomotionServiceServer is the server API for LocomotionService service.
// All implementations must embed UnimplementedLocomotionServiceServer
// for forward compatibility.
type LocomotionServiceServer interface {
	GetLocomotion(context.Context, *GetLocomotionRequest) (*Locomotion, error)
	CreateLocomotion(context.Context, *LocomotionCreate) (*CreateLocomotionResponse, error)
	mustEmbedUnimplementedLocomotionServiceServer()
}

// UnimplementedLocomotionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocomotionServiceServer struct{}

func (UnimplementedLocomotionServiceServer) GetLocomotion(context.Context, *GetLocomotionRequest) (*Locomotion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocomotion not implemented")
}
func (UnimplementedLocomotionServiceServer) CreateLocomotion(context.Context, *LocomotionCreate) (*CreateLocomotionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocomotion not implemented")
}
func (UnimplementedLocomotionServiceServer) mustEmbedUnimplementedLocomotionServiceServer() {}
func (UnimplementedLocomotionServiceServer) testEmbeddedByValue()                           {}

// UnsafeLocomotionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocomotionServiceServer will
// result in compilation errors.
type UnsafeLocomotionServiceServer interface {
	mustEmbedUnimplementedLocomotionServiceServer()
}

func RegisterLocomotionServiceServer(s grpc.ServiceRegistrar, srv LocomotionServiceServer) {
	// If the following call pancis, it indicates UnimplementedLocomotionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocomotionService_ServiceDesc, srv)
}

func _LocomotionService_GetLocomotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocomotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocomotionServiceServer).GetLocomotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocomotionService_GetLocomotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocomotionServiceServer).GetLocomotion(ctx, req.(*GetLocomotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocomotionService_CreateLocomotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocomotionCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocomotionServiceServer).CreateLocomotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocomotionService_CreateLocomotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocomotionServiceServer).CreateLocomotion(ctx, req.(*LocomotionCreate))
	}
	return interceptor(ctx, in, info, handler)
}

// LocomotionService_ServiceDesc is the grpc.ServiceDesc for LocomotionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocomotionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "locomotion.LocomotionService",
	HandlerType: (*LocomotionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocomotion",
			Handler:    _LocomotionService_GetLocomotion_Handler,
		},
		{
			MethodName: "CreateLocomotion",
			Handler:    _LocomotionService_CreateLocomotion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "locomotion-server/locomotion-server.proto",
}
